<?php

namespace Datto\Malware;

use \PDO;

/**
 * Ransomware rule
 * @author Chuck Roydhouse <cer@datto.com>
 */
abstract class RansomwareRule
{
    /** @var PDO */
    protected $pdo;

    /** @var string */
    protected $name;

    /** @var string */
    protected $description;

    /** @var float */
    protected $threshold;

    /** @var int */
    protected $minimumSamples;

    /** @var int */
    protected $maximumOccurrences;

    /** @var int|null */
    protected $occurrences;

    /** @var int|null */
    protected $total;

    /** @var float|null */
    protected $percent;

    /** @var bool|null */
    private $result;

    /**
     * @param PDO $pdo
     * @param string $name
     * @param string $description
     * @param float $threshold
     * @param int $minimumSamples
     * @param int $maximumOccurrences
     */
    public function __construct(
        PDO $pdo,
        string $name,
        string $description,
        float $threshold = RansomwareConfiguration::DEFAULT_OCCURRENCE_THRESHOLD,
        int $minimumSamples = RansomwareConfiguration::DEFAULT_MINIMUM_SAMPLES,
        int $maximumOccurrences = RansomwareConfiguration::DEFAULT_MAXIMUM_OCCURRENCES
    ) {
        $this->pdo = $pdo;
        $this->name = $name;
        $this->description = $description;
        $this->threshold = $threshold;
        $this->minimumSamples = $minimumSamples;
        $this->maximumOccurrences = $maximumOccurrences;
        $this->occurrences = null;
        $this->total = null;
        $this->percent = null;
        $this->result = null;

        $namespaceEndPos = strrpos($this->name, '\\');
        if ($namespaceEndPos !== false) {
            $this->name = substr($this->name, $namespaceEndPos + 1);
        }

        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @return string
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * @return float
     */
    public function getThreshold(): float
    {
        return $this->threshold;
    }

    /**
     * @return int
     */
    public function getMinimumSamples(): int
    {
        return $this->minimumSamples;
    }

    /**
     * @return int
     */
    public function getMaximumOccurrences(): int
    {
        return $this->maximumOccurrences;
    }

    /**
     * @return int|null
     */
    public function getOccurrences()
    {
        return $this->occurrences;
    }

    /**
     * @return int|null
     */
    public function getTotal()
    {
        return $this->total;
    }

    /**
     * @return float|null
     */
    public function getPercent()
    {
        return $this->percent;
    }

    /**
     * @return bool|null
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * Perform detection and return result.
     * @return bool
     */
    public function detect(): bool
    {
        $this->total = $this->getTotalOccurrences();
        $this->occurrences = $this->getDetectedOccurrences();
        $this->percent = $this->getTotal() === 0 ? 0.0 : (float)$this->getOccurrences() / (float)$this->getTotal();
        $this->result = ($this->getPercent() > $this->getThreshold() && $this->getTotal() > $this->getMinimumSamples()) || $this->getOccurrences() > $this->getMaximumOccurrences();
        return $this->getResult();
    }

    /**
     * @return array
     */
    public function toArray(): array
    {
        return [
            'name' => $this->getName(),
            'description' => $this->getDescription(),
            'result' => $this->getResult(),
            'occurrences' => $this->getOccurrences(),
            'total' => $this->getTotal(),
            'percent' => $this->getPercent(),
            'threshold' => $this->getThreshold(),
            'minimum_samples' => $this->getMinimumSamples(),
            'maximum_occurrences' => $this->getMaximumOccurrences(),
            'files' => $this->getDetectedOccurrencesFileList()
        ];
    }

    /**
     * @return int
     */
    abstract protected function getTotalOccurrences(): int;

    /**
     * @return int
     */
    abstract protected function getDetectedOccurrences(): int;

    /**
     * @return array
     */
    abstract protected function getDetectedOccurrencesFileList(): array;
}
