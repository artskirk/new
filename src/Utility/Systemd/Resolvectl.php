<?php

namespace Datto\Utility\Systemd;

use Datto\Common\Utility\Filesystem;
use Datto\Utility\Network\IpAddress;

/**
 * Utility class for interacting with resolvectl and systemd-resolved configuration
 *
 * @see https://www.freedesktop.org/software/systemd/man/resolved.conf.html
 * @see https://www.freedesktop.org/software/systemd/man/systemd-resolved.service.html
 */
class Resolvectl
{
    public const RESOLVED_SERVICE = 'systemd-resolved.service';
    private const RESOLVED_DROPIN_PATH = '/etc/systemd/resolved.conf.d/';
    private const GLOBAL_DNS_DROPIN_FILE = self::RESOLVED_DROPIN_PATH . 'global_dns.conf';

    private const DROPIN_CONTENTS = <<<EOF
# This file was automatically generated by Datto on %s
# Do not modify by hand
[Resolve]
DNS=%s
Domains=%s

EOF;

    private Filesystem $filesystem;
    private Systemctl $systemctl;

    public function __construct(
        Filesystem $filesystem,
        Systemctl $systemctl
    ) {
        $this->filesystem = $filesystem;
        $this->systemctl = $systemctl;
    }

    /**
     * Get a list of global DNS servers, or an empty array if no global nameservers are configured
     *
     * @return IpAddress[]
     */
    public function getGlobalDnsServers(): array
    {
        $serverLine = $this->readGlobalDnsConf()['DNS'] ?? '';
        $addrStrings = explode(' ', $serverLine);

        // Return any valid IP addresses in the array
        return array_values(array_filter(array_map(fn($addrStr) => IpAddress::fromAddr($addrStr), $addrStrings)));
    }

    /**
     * Get a list of the DNS search domains, or an empty array if no such configuration exists.
     *
     * @return string[] Array of globally-configured DNS search domains
     */
    public function getGlobalSearchDomains(): array
    {
        $searchLine = $this->readGlobalDnsConf()['Domains'] ?? '';
        $searches = explode(' ', $searchLine);

        // Filter out the `~.` operator, which is what tells systemd-resolved to prefer the global DNS
        // servers set in this file over the per-interface settings that might be set via DHCP.
        return array_values(array_filter($searches, function ($search) {
            return $search !== '' && strcmp($search, '~.') !== 0;
        }));
    }

    /**
     * Configures the global DNS parameters for systemd-resolved. These will take precedence over per-interface DNS
     * settings, except in the case of an exact domain name match being present in a per-interface configuration that
     * is not present in the global settings.
     *
     * @param IpAddress[] $nameservers
     * @param string[] $searchDomains
     */
    public function setGlobalDns(array $nameservers, array $searchDomains): void
    {
        // If we provided at least one nameserver, add the ~. operator to the list of search domains, which tells
        // resolved to prefer these nameservers over the per-interface settings.
        if (!empty($nameservers)) {
            $searchDomains = array_merge(['~.'], $searchDomains);
        }

        $this->writeGlobalDnsConf(
            array_map(fn($nameserver) => $nameserver->getAddr(), $nameservers),
            $searchDomains
        );
        $this->restartService();
    }

    /**
     * Restarts the systemd-resolved service
     */
    private function restartService(): void
    {
        $this->systemctl->restart(self::RESOLVED_SERVICE);
    }

    /**
     * @return array An associative array with the global DNS configuration.
     */
    private function readGlobalDnsConf(): array
    {
        // Parse the dropin config. This only has a single valid section, [Resolve], so we don't need to parse sections
        if ($this->filesystem->exists(self::GLOBAL_DNS_DROPIN_FILE)) {
            $config = $this->filesystem->parseIniFile(self::GLOBAL_DNS_DROPIN_FILE, false, INI_SCANNER_RAW);
            if (is_array($config)) {
                return $config;
            }
        }

        return [];
    }

    /**
     * @param string[] $nameservers
     * @param string[] $domains
     */
    private function writeGlobalDnsConf(array $nameservers, array $domains): void
    {
        $contents = sprintf(
            self::DROPIN_CONTENTS,
            date(DATE_RFC2822),
            implode(' ', $nameservers),
            implode(' ', $domains)
        );
        $this->filesystem->filePutContents(self::GLOBAL_DNS_DROPIN_FILE, $contents);
        $this->filesystem->chmod(self::GLOBAL_DNS_DROPIN_FILE, 0644);
    }
}
