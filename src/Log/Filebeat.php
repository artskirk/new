<?php

namespace Datto\Log;

use Datto\Service\Networking\NetworkService;
use Datto\Common\Utility\Filesystem;
use Datto\Log\DeviceLoggerInterface;

/**
 * Handles configuring filebeat with any device-specific configurations.
 *
 * TODO: consider consolidating with other configuration classes.
 *
 * @author Chad Kosie <ckosie@datto.com>
 */
class Filebeat
{
    const SERVICE_NAME = 'filebeat.service';
    const ID_CONFIGURATION_FILE = '/etc/filebeat/conf.d/10-datto-id.yml';
    const ID_CONFIGURATION_FORMAT = <<<EOF
# Configuration file generated by systemd datto-filebeat-configure.service

name: %s
EOF;

    /** @var DeviceLoggerInterface */
    private $logger;

    /** @var Filesystem */
    private $filesystem;

    /** @var NetworkService */
    private $networkService;

    /**
     * @param DeviceLoggerInterface $logger
     * @param Filesystem $filesystem
     * @param NetworkService $networkService
     */
    public function __construct(
        DeviceLoggerInterface $logger,
        Filesystem $filesystem,
        NetworkService $networkService
    ) {
        $this->logger = $logger;
        $this->filesystem = $filesystem;
        $this->networkService = $networkService;
    }

    /**
     * Update filebeat's configuration.
     */
    public function configure()
    {
        $this->logger->info("FIB0001 Checking to see if filebeat needs configuration update ...");

        $existingConfiguration = $this->getExistingConfiguration();
        $generatedConfiguration = $this->getGeneratedConfiguration();

        if ($existingConfiguration !== $generatedConfiguration) {
            $this->logger->info("FIB0004 Filebeat configuration update needed, updating ...");
            $this->writeConfiguration($generatedConfiguration);
            $this->logger->info("FIB0005 Filebeat configuration update complete");
        } else {
            $this->logger->info("FIB0003 Filebeat configuration update not needed");
        }

        $this->logger->info("FIB0002 Filebeat configuration check complete");
    }

    /**
     * @param string $configuration
     */
    private function writeConfiguration(string $configuration)
    {
        $this->filesystem->filePutContents(self::ID_CONFIGURATION_FILE, $configuration);
    }

    /**
     * @return string
     */
    private function getGeneratedConfiguration(): string
    {
        return sprintf(
            self::ID_CONFIGURATION_FORMAT,
            $this->networkService->getHostname()
        );
    }

    /**
     * Get configuration contents.
     *
     * @return string|null
     */
    private function getExistingConfiguration()
    {
        if (!$this->filesystem->exists(self::ID_CONFIGURATION_FILE)) {
            return null;
        }

        return $this->filesystem->fileGetContents(self::ID_CONFIGURATION_FILE);
    }
}
