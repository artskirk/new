<?php

namespace Datto\App\Console\Command\Malware\Ransomware;

use Datto\Asset\Agent\Agent;
use Datto\Asset\AssetService;
use Datto\Backup\Stages\PrepareLocalVerifications;
use Datto\Core\Asset\Agent\DattoImageSnapshot;
use Datto\Malware\RansomwareService;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class CheckCommand extends Command
{
    protected static $defaultName = 'malware:ransomware:check';

    const EMAIL_MESSAGE_PATTERN = 'The snapshot taken at %s shows signs of ransomware.';
    const SNAPSHOT_DATE_PATTERN = 'g:ia l, F j, Y';

    /**
     * @var AssetService
     */
    private $assetService;

    /**
     * @var RansomwareService
     */
    private $ransomwareService;

    /**
     * @var DattoImageSnapshot
     */
    private $dattoImageSnapshot;

    public function __construct(
        AssetService $assetService,
        RansomwareService $ransomwareService,
        DattoImageSnapshot $dattoImageSnapshot
    ) {
        parent::__construct();

        $this->assetService = $assetService;
        $this->ransomwareService = $ransomwareService;
        $this->dattoImageSnapshot = $dattoImageSnapshot;
    }

    protected function configure()
    {
        $this
            ->setDescription('Check the files on a snapshot for the presence of ransomware.')
            ->addArgument('agent', InputArgument::REQUIRED, 'The Windows Agent to test')
            ->addArgument('snapshotEpoch', InputArgument::REQUIRED, 'ZFS snapshot of the agent, defined by a timestamp/epoch');
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return int
     */
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $agentKeyName = $input->getArgument('agent');
        $snapshotEpoch = $input->getArgument('snapshotEpoch');

        /** @var Agent $asset */
        $asset = $this->assetService->get($agentKeyName);

        $dattoImages = $this->dattoImageSnapshot->setup(
            $asset,
            $snapshotEpoch,
            PrepareLocalVerifications::LOCAL_VERIFICATION_CLONE_SUFFIX
        );

        try {
            $ransomwareResults = $this->ransomwareService->runTests($asset, $dattoImages, $snapshotEpoch);
        } finally {
            $this->dattoImageSnapshot->cleanup(
                $asset,
                $snapshotEpoch,
                PrepareLocalVerifications::LOCAL_VERIFICATION_CLONE_SUFFIX,
                $dattoImages
            );
        }

        return $ransomwareResults->hasRansomware() ? 1 : 0;
    }
}
